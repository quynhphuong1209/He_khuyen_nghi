# -*- coding: utf-8 -*-
"""Quỳnh Phương 3_5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L6_wJLdIQw1kK-7I31DbxZSxOl4AfWEC

# =============================
# BÀI TẬP 5: Ứng dụng trong y tế - Khuyến nghị phác đồ điều trị dựa trên luật kết hợp
# =============================
"""

import pandas as pd
import numpy as np
from mlxtend.frequent_patterns import apriori, association_rules
from mlxtend.preprocessing import TransactionEncoder
import matplotlib.pyplot as plt
import seaborn as sns

# Tạo dữ liệu giả lập
np.random.seed(42)

# Tạo thông tin bệnh nhân
n_patients = 300
patient_ids = [f'P{i}' for i in range(1, n_patients+1)]
ages = np.random.randint(18, 90, size=n_patients)
genders = np.random.choice(['Nam', 'Nữ'], size=n_patients)
conditions = np.random.choice(['Tim mạch', 'Hô hấp', 'Tiêu hóa', 'Thần kinh', 'Nội tiết'],
                             size=n_patients)

patients = pd.DataFrame({
    'PatientID': patient_ids,
    'Age': ages,
    'Gender': genders,
    'Condition': conditions
})

# Tạo danh sách phương pháp điều trị
treatments = [f'T{i}' for i in range(1, 51)]
# Tần suất sử dụng các phương pháp điều trị (ví dụ)
treatment_frequencies = {
    'Tim mạch': {t: 0.2 for t in treatments[:10]},
    'Hô hấp': {t: 0.15 for t in treatments[10:20]},
    'Tiêu hóa': {t: 0.25 for t in treatments[20:30]},
    'Thần kinh': {t: 0.18 for t in treatments[30:40]},
    'Nội tiết': {t: 0.22 for t in treatments[40:50]}
}

# Mối quan hệ giữa bệnh lý và kết quả điều trị (ví dụ)
condition_outcome_probs = {
    'Tim mạch': {'T1': 0.7, 'T2': 0.6, 'T3': 0.8, 'T4': 0.5, 'T5': 0.7, 'T6': 0.6, 'T7': 0.9, 'T8': 0.8, 'T9': 0.7, 'T10': 0.6},
    'Hô hấp': {'T11': 0.65, 'T12': 0.75, 'T13': 0.85, 'T14': 0.55, 'T15': 0.65, 'T16': 0.75, 'T17': 0.85, 'T18': 0.9, 'T19': 0.6, 'T20': 0.7},
    'Tiêu hóa': {'T21': 0.8, 'T22': 0.7, 'T23': 0.6, 'T24': 0.9, 'T25': 0.8, 'T26': 0.7, 'T27': 0.6, 'T28': 0.9, 'T29': 0.8, 'T30': 0.7},
    'Thần kinh': {'T31': 0.5, 'T32': 0.6, 'T33': 0.7, 'T34': 0.8, 'T35': 0.9, 'T36': 0.55, 'T37': 0.65, 'T38': 0.75, 'T39': 0.85, 'T40': 0.95},
    'Nội tiết': {'T41': 0.75, 'T42': 0.85, 'T43': 0.65, 'T44': 0.75, 'T45': 0.85, 'T46': 0.9, 'T47': 0.8, 'T48': 0.7, 'T49': 0.6, 'T50': 0.95}
}

# TODO: Tạo lịch sử điều trị cho mỗi bệnh nhân
# 1. Mỗi bệnh nhân có 3-10 phương pháp điều trị
treatment_history = {}
treatment_outcomes = {}  # Thêm dictionary này
for i, patient in enumerate(patient_ids):
    condition = patients.loc[i, 'Condition']
    available_treatments = list(condition_outcome_probs[condition].keys())
    num_treatments = np.random.randint(3, 8)  # Giảm số lượng treatments
    patient_treatments = np.random.choice(available_treatments, size=num_treatments, replace=False)
    treatment_history[patient] = patient_treatments

    # Gán kết quả điều trị dựa trên xác suất
    outcomes = []
    for treatment in patient_treatments:
        prob_success = condition_outcome_probs[condition][treatment]
        outcome = 'Thành công' if np.random.rand() < prob_success else 'Thất bại'
        outcomes.append(outcome)
    treatment_outcomes[patient] = list(zip(patient_treatments, outcomes))


# In ra một vài ví dụ
print("Ví dụ về lịch sử điều trị:")
for i, patient in enumerate(list(treatment_history.keys())[:3]):
    print(f"- Bệnh nhân {patient}: {treatment_history[patient]}")

print("\nVí dụ về kết quả điều trị:")
for i, patient in enumerate(list(treatment_outcomes.keys())[:3]):
    print(f"- Bệnh nhân {patient}: {treatment_outcomes[patient]}")

# 2. Phương pháp điều trị phụ thuộc vào bệnh lý
condition_treatments = {
    'Tim mạch': treatments[:10],
    'Hô hấp': treatments[10:20],
    'Tiêu hóa': treatments[20:30],
    'Thần kinh': treatments[30:40],
    'Nội tiết': treatments[40:50]
}
for patient, condition in zip(patient_ids, patients['Condition']):
    available_treatments = condition_treatments[condition]
    num_treatments = len(treatment_history[patient])
    treatment_history[patient] = np.random.choice(available_treatments, size=num_treatments, replace=True)

# In ra lịch sử điều trị sau khi cập nhật theo bệnh lý
print("\nLịch sử điều trị sau khi phụ thuộc vào bệnh lý:")
for i, patient in enumerate(list(treatment_history.keys())[:5]):
    print(f"- Bệnh nhân {patient}: {treatment_history[patient]}")

# 3. Gán kết quả điều trị (thành công/thất bại)
treatment_outcomes = {}
for patient in patient_ids:
    patient_treatments = treatment_history[patient]
    outcomes = np.random.choice(['Thành công', 'Thất bại'], size=len(patient_treatments))
    treatment_outcomes[patient] = list(zip(patient_treatments, outcomes))

# In ra một vài ví dụ về kết quả điều trị
print("\nVí dụ về kết quả điều trị:")
for i, patient in enumerate(list(treatment_outcomes.keys())[:5]):
    print(f"- Bệnh nhân {patient}: {treatment_outcomes[patient]}")

# Chuyển đổi dữ liệu lịch sử điều trị thành DataFrame
treatment_history_list = []
for patient, treatments in treatment_history.items():
    treatment_history_list.append(list(treatments))

# In ra danh sách lịch sử điều trị
print("\nDanh sách lịch sử điều trị:")
print(treatment_history_list[:5])  # In 5 danh sách đầu tiên

# TODO: Chuyển đổi lịch sử điều trị thành dữ liệu giao dịch
# 1. Mỗi bệnh nhân là một giao dịch
treatment_history_list = []
for patient, treatments in treatment_history.items():  # Giả sử treatment_history đã được tạo ở trên
    treatment_history_list.append(list(treatments))

# In ra một vài ví dụ về treatment_history_list
print("\nVí dụ về treatment_history_list (5 giao dịch đầu):")
for i, transaction in enumerate(treatment_history_list[:5]):
    print(f"- Giao dịch {i+1}: {transaction}")

# 2. Các phương pháp điều trị là các mục
te = TransactionEncoder()
te_ary = te.fit(treatment_history_list).transform(treatment_history_list)
transaction_df = pd.DataFrame(te_ary, columns=te.columns_)

# In ra DataFrame giao dịch
print("\nDataFrame giao dịch (10 hàng đầu):")
print(transaction_df.head(10))

# In ra thông tin về shape của DataFrame
print("\nShape của DataFrame giao dịch:", transaction_df.shape)

# TODO: Áp dụng thuật toán Apriori và tạo luật kết hợp
# 1. Tìm các mẫu hình điều trị phổ biến
frequent_itemsets = apriori(transaction_df, min_support=0.01, use_colnames=True)

# In ra các tập phổ biến
print("\nCác tập phổ biến (10 hàng đầu):")
print(frequent_itemsets.head(10))

# 2. Tạo luật kết hợp
rules = association_rules(frequent_itemsets, metric="lift", min_threshold=1)

# In ra các luật kết hợp
print("\nCác luật kết hợp (10 hàng đầu):")
print(rules.head(10))

# 3. Lọc các luật dựa trên kết quả điều trị
successful_treatments = {}
for patient, outcomes in treatment_outcomes.items():
    successful_treatments[patient] = [treatment for treatment, outcome in outcomes if outcome == 'Thành công']

filtered_rules = rules.copy()  # Ban đầu giữ lại tất cả các luật
for i, rule in rules.iterrows():
    antecedents = set(rule['antecedents'])
    successful_antecedent_counts = 0
    total_antecedent_occurrences = 0
    for patient, treatments in treatment_history.items():
        if antecedents.issubset(treatments):
            total_antecedent_occurrences += 1
            if all(treatment in successful_treatments.get(patient, []) for treatment in antecedents):
                successful_antecedent_counts += 1
    # Lọc luật nếu tỷ lệ thành công của antecedent dưới một ngưỡng nhất định (ví dụ: 0.5)
    if total_antecedent_occurrences > 0 and successful_antecedent_counts / total_antecedent_occurrences < 0.5:
        filtered_rules.drop(i, inplace=True, errors='ignore')

# In ra các luật sau khi lọc
print("\nCác luật kết hợp sau khi lọc (10 hàng đầu):")
print(filtered_rules.head(10))

# In ra shape của luật trước và sau khi lọc
print("\nSố lượng luật trước khi lọc:", rules.shape[0])
print("Số lượng luật sau khi lọc:", filtered_rules.shape[0])

# TODO: Xây dựng hệ khuyến nghị phác đồ điều trị
# def recommend_treatment(patient_treatments, rules, top_n=5):
#     recommendations = []
#     for _, rule in rules.iterrows():
#         antecedents = set(rule['antecedents'])
#         if antecedents.issubset(patient_treatments):
#             for treatment in rule['consequents']:
#                 if treatment not in patient_treatments:
#                     recommendations.append((treatment, rule['confidence'], rule['lift']))
#
#     # Sắp xếp theo độ tin cậy và độ nâng
#     recommendations.sort(key=lambda x: (x[1], x[2]), reverse=True)
#     return recommendations[:top_n]
def recommend_treatment(patient_treatments, rules, top_n=5):
    recommendations = []
    for _, rule in rules.iterrows():
        antecedents = set(rule['antecedents'])
        if antecedents.issubset(patient_treatments):
            for treatment in rule['consequents']:
                if treatment not in patient_treatments:
                    recommendations.append((treatment, rule['confidence'], rule['lift']))

    # Sắp xếp theo độ tin cậy và độ nâng
    recommendations.sort(key=lambda x: (x[1], x[2]), reverse=True)
    return recommendations[:top_n]

# Ví dụ sử dụng hệ khuyến nghị
patient_id_to_recommend = 'P1'
treatments_for_patient = treatment_history[patient_id_to_recommend]

# Kiểm tra xem có luật nào không
if filtered_rules.shape[0] == 0:
    print("\nKhông có luật kết hợp nào được tạo ra sau khi lọc. Cần xem xét lại các tham số Apriori hoặc dữ liệu.")
else:
    print(f"\nSố lượng luật kết hợp sau khi lọc: {filtered_rules.shape[0]}")
    # In ra một vài luật có lift cao nhất (ví dụ)
    top_lift_rules = filtered_rules.nlargest(5, 'lift')
    print("\nCác luật có lift cao nhất (5 luật đầu):")
    print(top_lift_rules[['antecedents', 'consequents', 'lift']].to_string())

    top_recommendations = recommend_treatment(treatments_for_patient, filtered_rules)

    if len(top_recommendations) > 0:
        print(f"\nTop {len(top_recommendations)} Recommendations for Patient {patient_id_to_recommend}:")
        for treatment, confidence, lift in top_recommendations:
            print(f"- Treatment: {treatment}, Confidence: {confidence:.2f}, Lift: {lift:.2f}")
    else:
        print(f"\nKhông có khuyến nghị nào cho bệnh nhân {patient_id_to_recommend} dựa trên các luật hiện có.")

# TODO: Đánh giá chất lượng khuyến nghị và phân tích kết quả
def evaluate_recommendations(tracking_data, all_patient_ids, all_treatments):
    total_recommendations = 0
    applied_count = 0
    successful_count = 0
    failed_count = 0
    not_applied_count = 0
    unique_treatment_sets = set()  # Để theo dõi độ đa dạng
    patient_with_recommendation_count = 0 # Đếm số bệnh nhân có khuyến nghị

    for patient, recommendations in tracking_data.items():
        total_recommendations += len(recommendations)
        if recommendations: # Kiểm tra xem có khuyến nghị cho bệnh nhân này không
            patient_with_recommendation_count += 1
        for treatment, data in recommendations.items():
            if data['status'] == 'Áp dụng':
                applied_count += 1
                if data['outcome'] == 'Thành công':
                    successful_count += 1
                elif data['outcome'] == 'Thất bại':
                    failed_count += 1
            elif data['status'] == 'Không áp dụng':
                not_applied_count += 1
            unique_treatment_sets.add(frozenset(recommendations.keys())) # Đóng băng set để hashable

    accuracy = (successful_count / applied_count) * 100 if applied_count > 0 else 0
    application_rate = (applied_count / total_recommendations) * 100 if total_recommendations > 0 else 0
    success_rate = (successful_count / total_recommendations) * 100 if total_recommendations > 0 else 0
    failure_rate = (failed_count / total_recommendations) * 100 if total_recommendations > 0 else 0
    not_applied_rate = (not_applied_count / total_recommendations) * 100 if total_recommendations > 0 else 0
    coverage = (patient_with_recommendation_count / len(all_patient_ids)) * 100 if all_patient_ids else 0
    diversity = len(unique_treatment_sets)

    # Tính độ mới lạ (ví dụ đơn giản: đếm số lượng khuyến nghị không phổ biến)
    # (Cần dữ liệu về tần suất sử dụng các phương pháp điều trị trong thực tế)
    novel_recommendations_count = 0
    for patient, recommendations in tracking_data.items():
        for treatment, data in recommendations.items():
            # Giả sử có một hàm is_common_treatment(treatment)
            # if not is_common_treatment(treatment):
            #     novel_recommendations_count += 1
            pass # Tạm thời bỏ qua phần này vì cần dữ liệu thực tế

    novelty_rate = (novel_recommendations_count / total_recommendations) * 100 if total_recommendations > 0 else 0

    return {
        'accuracy': accuracy,
        'application_rate': application_rate,
        'success_rate': success_rate,
        'failure_rate': failure_rate,
        'not_applied_rate': not_applied_rate,
        'coverage': coverage,
        'diversity': diversity,
        'novelty_rate': novelty_rate
    }

# Dữ liệu theo dõi (ví dụ)
recommendation_tracking = {
    'P1': {
        'T12': {'status': 'Áp dụng', 'outcome': 'Thành công'},
        'T25': {'status': 'Không áp dụng', 'outcome': None},
        'T31': {'status': 'Áp dụng', 'outcome': 'Thất bại'}
    },
    'P2': {
        'T1': {'status': 'Áp dụng', 'outcome': 'Thành công'},
        'T18': {'status': 'Áp dụng', 'outcome': 'Thất bại'},
        'T33': {'status': 'Không áp dụng', 'outcome': None},
        'T42': {'status': 'Áp dụng', 'outcome': 'Thành công'}
    },
    'P3': {
        'T5': {'status': 'Áp dụng', 'outcome': 'Thành công'},
        'T9': {'status': 'Không áp dụng', 'outcome': None}
    },
    # ... Thêm dữ liệu cho các bệnh nhân khác
}

# Giả sử có danh sách tất cả các PatientID và Treatment
all_patient_ids = [f'P{i}' for i in range(1, 301)]  # Thay 301 bằng số lượng bệnh nhân thực tế
all_treatments = [f'T{i}' for i in range(1, 51)]   # Thay 51 bằng số lượng phương pháp điều trị thực tế

metrics = evaluate_recommendations(recommendation_tracking, all_patient_ids, all_treatments)

print("\nĐánh giá chất lượng khuyến nghị:")
print(f"  - Độ chính xác (Accuracy): {metrics['accuracy']:.2f}%")
print(f"  - Tỷ lệ áp dụng (Application Rate): {metrics['application_rate']:.2f}%")
print(f"  - Tỷ lệ thành công (Success Rate): {metrics['success_rate']:.2f}%")
print(f"  - Tỷ lệ thất bại (Failure Rate): {metrics['failure_rate']:.2f}%")
print(f"  - Tỷ lệ không áp dụng (Not Applied Rate): {metrics['not_applied_rate']:.2f}%")
print(f"  - Độ bao phủ (Coverage): {metrics['coverage']:.2f}%")
print(f"  - Độ đa dạng (Diversity): {metrics['diversity']}")
print(f"  - Tỷ lệ mới lạ (Novelty Rate): {metrics['novelty_rate']:.2f}%")